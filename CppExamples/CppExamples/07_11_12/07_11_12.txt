////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
	
					11 Temmuz 2015 Cumartesi

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>

using namespace std;


void func(int &r)
{
	cout << "L value reference" << endl;
}

void func(int &&r)
{
	cout << "R value reference" << endl;
}


int main()
{
	int x = 45;
	func(x);

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>

using namespace std;

class Vector{
	int m_size;
	int *m_p;
public:
	Vector(int size) : m_size(size), m_p(new int[size]) {}
	Vector(const Vector &r) : m_size(r.m_size)
	{
		m_p = new int[m_size];
		for (int k = 0; k < m_size; k++) {
			m_p[k] = r.m_p[k];
		}
	}

	Vector &operator=(const Vector &);  //copy assignment func.
	Vector &operator=(Vector &&);  //move assignment func.


	Vector(Vector &&r) : m_p(r.m_p), m_size(r.m_size)
	{
		r.m_p = nullptr;
		r.m_size = 0;
	}
	~Vector()
	{
		if (m_p)
			delete[] m_p;
	}

};


int main()
{
	Vector vec(565);

	vec = getvector();

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <set>


using namespace std;

set<int> getvals(int min, int max, int n)
{
	set<int> retval;

	while (n--)
		retval.insert(rand() % (max - min) + min);

	return retval;
}	


int main()
{
	srand((unsigned)time(nullptr));

	auto s = getvals(10, 30, 6);

	for (auto x : s)
		cout << x << " ";

	cout << endl;

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <vector>


using namespace std;

class Engine {
public:
	Engine()
	{
		cout << "Engine::Engine()" << endl;
	}
};


class Car {
	Engine m_e;
public:

};

int main()
{
	Car  mycar;

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <vector>


using namespace std;

class Engine {
public:
	Engine(int cyl)
	{
		cout << "Engine::Engine(int cyl)" << endl;
	}
};


class Car {
	Engine m_e;
public:

};

int main()
{
	Car  mycar;  //gecersiz

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <vector>


using namespace std;


class Node {
	int mval;
	Node *pnext;
};

class List {
	Node *pstart;
	///
public:
	void push_back()
	{
		pstart->mval;
	}
};

int main()
{
	

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <vector>


using namespace std;

class Engine {
	
public:
	Engine()
	{
		cout << "Engine::constructor()" << endl;
	}

	~Engine()
	{
		cout << "Engine::destructor()" << endl;
	}
};

class Transmission {

public:
	Transmission()
	{
		cout << "Transmission::constructor()" << endl;
	}

	~Transmission()
	{
		cout << "Transmission::destructor()" << endl;
	}
};

class Car {
	Engine m_e;
	Transmission m_t;
public:
	Car()
	{
		cout << "Car::constructor()" << endl;
	}

	~Car()
	{
		cout << "Car::destructor()" << endl;
	}

};

int main()
{
	Car mycar;

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <vector>


using namespace std;

class Student{
	string m_name;
	string m_fname;
public:
	Student(const string &name, const string &fname) : m_name(name), m_fname(fname)
	{
		//////
	}
	void display()const
	{
		cout << m_name << " " << m_fname << endl;
	}

};

int main()
{
	Student s("ali", "arbak");

	s.display();

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <vector>


using namespace std;

class Engine{
public:
	void start();
	void stop();
};

class Car {
	Engine m_e;
public:
	////
	void start()
	{
		m_e.start();
	}
};

int main()
{
	Car mycar;



	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

void TetrisGame(TetrisShape &r)
{
	switch (*******) {
	case F1 : r.rotate()
	}

}



#include <iostream>
#include <string>
#include <list>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <vector>


using namespace std;

class Member {
public:
	Member() = default;
	Member(const Member &r)
	{
		cout << "Member::copy constructor" << endl;
	}
};

class Owner {
	Member m;
public:
};


int main()
{
	Owner x;
	Owner y(x);


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

				12 Temmuz 2015 Pazar

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

class Member {
public:
	Member &operator=(const Member &)
	{
		cout << "Member::operator=(const Member &);" << endl;
		return *this;
	}
};

class Owner {
	Member mem;
};

int main()
{
	Owner x, y;
	////

	x = y;

	return 0;
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

class Member {
public:
	Member &operator=(const Member &)
	{
		cout << "Member::operator=(const Member &);" << endl;
		return *this;
	}
};

class Owner {
	Member mem;
public:
	Owner &operator=(const Owner &r)
	{
		//mem = r.mem;
		cout << "Owner::operator=(const Owner &);" << endl;
		return *this;
	}
};

int main()
{
	Owner x, y;
	////

	x = y;

	return 0;
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////



#include <iostream>
#include <vector>


using namespace std;


class Myclass {
public:
	typedef int Color;
	void func(Color);

};

//////
void Myclass::func(Color)
{
}


int main()
{
	Myclass::Color x;

	return 0;
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
#include <iostream>
#include <vector>


using namespace std;


class Myclass {
public:
	typedef int Color;
	Color func();

};

//Color Myclass::func()  //gecersiz - ilevin g.d.d'nin yazildii yer class scope'da degil
//{
//
//}

Myclass::Color Myclass::func()  
{

}


int main()
{
	Myclass::Color x;

	return 0;
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////



#include <iostream>
#include <vector>


using namespace std;


class Myclass {
public:
	class Iterator {

	};
private:
	Iterator m_iter;

};


int main()
{

	return 0;
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////



#include <iostream>
#include <vector>


using namespace std;

///////myclass.h

class Myclass {
	class Color;
public:
};

/////myclass.cpp
class Myclass::Color {
public:
	Color();
};

Myclass::Color::Color()
{

}


int main()
{

	return 0;
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////





//// myclass.h
class Myclass {
	int mx, my;
public:
	void func();
};


//////myclass.cpp
void Myclass::func()
{
	mx = 10, my = 34;
}




//// myclass.h
class Myclass {
	struct Pimple;
	Pimple *mp;
public:
	Myclass();
	~Myclass();
	void display()const;

};


///cpp
struct Myclass::Pimple {
	int mx, my;
	Pimple() :mx(0), my(0) {}
};

Myclass::~Myclass()
{
	delete mp;
}

Myclass::Myclass() : mp{ new Pimple } {}

void Myclass::display()const {
	mp->mx;
	mp->my;

}
#include <vector>
#include <iostream>

using namespace std;

class Vector {
public:
	typedef unsigned int size_type;
	class Iterator {
	public:
		friend bool operator!=(Iterator x, Iterator y);
		int &operator*();
	};
	Iterator begin();
	Iterator end();
	size_type size()const;

};

int main()
{
	Vector myvec;

	Vector::size_type size = myvec.size();

	return 0;
}
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
#include <vector>
#include <iostream>

using namespace std;

class Vector {
public:
	typedef unsigned int size_type;
	class Iterator {
	public:
		friend bool operator!=(Iterator x, Iterator y);
		int &operator*();
	};
	Iterator begin();
	Iterator end();
	size_type size()const;

};

int main()
{
	Vector myvec;

	Vector::size_type size = myvec.size();

	return 0;
}
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
#include <vector>
#include <iostream>

using namespace std;

enum Oldenum {red, white, gray};


int main()
{
	Oldenum x;
	
	x = red;

	return 0;
}
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
#include <vector>
#include <iostream>

using namespace std;

enum Oldenum {red, white, gray};


int main()
{
	Oldenum x = gray;;
	int ival;

	ival = x;
	

	return 0;
}
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
#include <vector>
#include <iostream>

using namespace std;

class ColorWrapper {
public:
	enum Color { red, white, gray, green };
};
enum TrafficLight{ red, yellow, green };



int main()
{

	return 0;
}
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
#include <vector>
#include <iostream>

using namespace std;

enum class Color {red, green, yellow};

int main()
{
	Color mycolor;

	mycolor = Color::green;
	
	int ival = mycolor;


	return 0;
}
