////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

			27 Haziran 2015 Cumartesi

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

class Dyna {
	int mx;
	Dyna(int x) : mx{ x } {}
public:
	static Dyna *createObject(int val)
	{
		return new Dyna(val);
	}

	void display()const
	{
		cout << "(" << mx << ")" << endl;
	}

};


int main()
{
	Dyna *p = Dyna::createObject(45);

	p->display();

	return 0;
}


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


class Complex {
	Complex(double r, double i);
	Complex(double angle, double distance, int dummy);   
public:
	static Complex *createCarta(double r, double i)
	{
		return new Complex(r, i);
	}

	static Complex *createPolar(double angle, double distance)
	{
		return new Complex(angle, distance, 0);
	}
	
};


int main()
{
	return 0;
}


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


class Sina {
	static Sina *mspsingle;
	Sina();
public:
	static Sina *singleton()
	{
		if (Sina::mspsingle == nullptr) {
			mspsingle = new Sina;
		}
		return Sina::mspsingle;
	}
	void display()const{}
};

////cpp
Sina * Sina::mspsingle = nullptr;


int main()
{
	auto &mysingleton = *Sina::singleton();

	mysingleton.display();

	return 0;
}


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


class Sina {
	Sina() {}
public:
	static Sina * singleton()
	{
		static Sina single;
		return &single;
	}
	void display()const {}
};

////cpp


int main()
{
	auto ptr = Sina::singleton();

	ptr->display();

	return 0;
}


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


class Data{
	static const size_t ms_size = 100;
	static int a[];
public:
	static size_t getsize() { return ms_size; }
};

////cpp
int Data::a[Data::ms_size];

int main()
{
	cout << Data::getsize() << endl;
	

	return 0;
}


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


class Myclass {
public:
	Myclass(int) {
		cout << "Myclass(int)" << endl;
	}
	~Myclass() {
		cout << "~Myclass()" << endl;
	}
	Myclass &operator=(const Myclass &r)
	{
		cout << "Myclass::operator=" << endl;

		return *this;
	}

};


int main()
{
	Myclass m(456);

	m = 20;

	cout << "bugun hava cok guzel" << endl;

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;

class Counter {
public:
	Counter();
	Counter(int);
	void display()const;

};

void func(Counter);
void foo(const Counter &);
void falanca(Counter &);



int main()
{
	func(10);
	foo(20);
	falanca(56);  //gecersiz. referansn const olmasi gerekiyor

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <memory>

using namespace std;

class Myclass {

public:
	Myclass()
	{
		cout << "Myclass::constructor" << endl;
	}

	~Myclass()
	{
		cout << "Myclass::destructor" << endl;
	}

	void display()const
	{
		cout << "Myclass::display" << endl;
	}
};


int main()
{
	Myclass *p = new Myclass;
	
	p->display();

	delete p;

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <memory>

using namespace std;

class Myclass {

public:
	Myclass()
	{
		cout << "Myclass::constructor" << endl;
	}

	~Myclass()
	{
		cout << "Myclass::destructor" << endl;
	}

	void display()const
	{
		cout << "Myclass::display" << endl;
	}
};


int main()
{
	cout << "main basladi" << endl;
	{
		unique_ptr<Myclass> ptr = new Myclass;
		string s = "ali"
		ptr->display();

	}

	cout << "main bitiyor" << endl;

	
	

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <string>
#include <memory>

using namespace std;

class Myclass {

public:
	explicit Myclass(const char *p);
};


void func(Myclass m);

int main()
{
	func(Myclass("ali"));
	
	

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

				28 Haziran 2015 Pazar

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <memory>

using namespace std;


int main()
{
	int x = 10;
	int y = 20;
	double dval;

	dval = static_cast<double>(x) / y;

	//srand((unsigned int)time(nullptr));
	srand(static_cast<unsigned int>(time(nullptr)));




	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <memory>

using namespace std;

char *mystrchr(const char *ptr, int ch)
{
	while (*ptr != '\0') {
		if (*ptr == ch)
			return const_cast<char *>(ptr);
		++ptr;
	}

	if (ch == '\0')
		return const_cast<char *>(ptr);

	return nullptr;
}


int main()
{
	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <memory>

using namespace std;


int main()
{
	const double dval = 2.3;
	char *ptr;


	ptr = reinterpret_cast<char *>(const_cast<double *>(&dval));

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>


using namespace std;


int main()
{
	int i = 12;
	double d = 2.3;

	cout << i << " " << d << endl;
	cout.operator<<(i).operator<<(" ").operator<<(d).operator<<(endl);


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>


using namespace std;

class Neco
{
	
};

Neco operator*(const Neco &r1, const Neco &r2)
{
	Neco retval;
	cout << "operator*(Neco &, Neco &)" << endl;
	////
	return retval;
}

Neco operator+(const Neco &r1, const Neco &r2)
{
	Neco retval;
	cout << "operator+(Neco &, Neco &)" << endl;
	////
	return retval;
}


int main()
{
	Neco n1, n2, n3, n4;

	n1 = n2 + n3 * n4;

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <set>

using namespace std;

class Neco {

public:
	bool operator<(const Neco &r)const;
};


int main()
{
	set<Neco> myset;
	Neco myneco;

	myset.insert(myneco);


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>


using namespace std;

class Neco
{
public:
	Neco operator*(const Neco &r1)const
	{
		Neco retval;
		cout << "Neco::operator*()" << endl;
		return retval;
	}
	Neco operator+(const Neco &r1)const
	{
		Neco retval;
		cout << "Neco::operator+()" << endl;
		return retval;
	}
};

int main()
{
	Neco n1, n2, n3, n4;

	n1 = n2 + n3 * n4;

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

class Date {

public:
	Date &operator++();  //prefix++;
	Date operator++(int);  //postfix++;

};


int main()
{

	return 0;
}