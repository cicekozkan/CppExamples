///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

				31 Ekim 2015 Cumartesi

///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <fstream>

#include "date.h"

using namespace std;

class Base {
public:
	void pub_func() {}
protected:
	void pro_func() {}

private: 
	void pri_func() {}

};


class Der : public Base{
	void foo()
	{
		pub_func();
		pro_func();
	}
};

int main()
{
	Der myder;

	myder.pub_func();

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <fstream>

#include "date.h"

using namespace std;

class Base {
public:
	void pub_func() {}
protected:
	void pro_func() {}

private: 
	void pri_func() {}

};


class Der : private Base{
public:
	using Base::pub_func;
};

int main()
{
	Der myder;

	myder.pub_func();

	

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <fstream>

#include "date.h"

using namespace std;

class Base {
public:
	void pub_func() {}
protected:
	void pro_func() {}

private: 
	void pri_func() {}

};


class Der : private Base{
public:
	void foo()
	{
		pub_func();
		pro_func();

	}
};


class Sder : public Der {
	void falanca()
	{
		pub_func();  //gecersiz
		pro_func();  //gecersiz
	}
	
};


int main()
{

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <fstream>

#include "date.h"

using namespace std;

class Base {
public:
	void pub_func() {}
protected:
	void pro_func() {}

private: 
	void pri_func() {}

};


class Der : protected Base{
public:
	void foo()
	{
		pub_func();
		pro_func();

	}
};


class Sder : public Der {
	void falanca()
	{
		pub_func();  //gecersiz
		pro_func();  //gecersiz
	}
	
};


int main()
{

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

template<typename T, typename U>
struct Pair
{
	T first;
	U second;
	Pair();
	Pair(const T &t, const U &u);
	template<class A, class B)
	Pair(const Pair<A, B> &r)
}


#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;


int main()
{
	tuple<Date, double, long, string> x;
	Date mydate(12, 3, 1987);

	get<0>(x) = mydate;


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;


int main()
{
	int a = 10;
	int b = 20;

	auto x = make_pair(ref(a), ref(b));

	x.first = 56;
	x.second = 98;

	cout << "a = " << a << endl;
	cout << "b = " << b << endl;

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;


int main()
{
	int x = 20;
	int y = 30;

	pair<int, int> mypair(45, 98);

	x = mypair.first;
	y = mypair.second;

	tie(x, y) = mypair;




	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;


int main()
{
	Date d1;

	tuple<int, double, Date, string> tx(10, 2.3, d1, "mustafa");
	int ival;
	double dval;
	Date mydate;
	string name;

	tie(ival, dval, mydate, name) = tx;


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;


int main()
{
	Date d1;

	tuple<int, double, Date, string> tx(10, 2.3, d1, "mustafa");
	int ival;
	double dval;
	Date mydate;
	string name;

	tie(ival, dval, std::ignore, name) = tx;


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;



class Myclass {
	std::tuple<int, double, string, Date> mt;
	////
public:
	bool less(const Myclass &r)const
	{
		int ival;
		double dval;
		string name;
		Date mydate;


		return tie(ival, dval, name, mydate) < r.mt;
	}

};


int main()
{


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;


int main()
{
	tuple<int, double, string> x;

	cout << tuple_size<decltype(x)>::value << endl;

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;


int main()
{
	auto p1 = make_pair(10, 2.);
	auto p2 = make_tuple(4, 1.2);

	p2 = p1;
	p1 = p2;  //gecersiz

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;


int main()
{
	auto t1 = make_tuple(10, 3.4, string("ali"));
	auto t2 = make_pair(2.4L, 4u);
	int a = 5;
	char c = 'K';

	auto x = tuple_cat(t1, t2, tie(a, c));

	cout << tuple_size<decltype(x)>::value << endl;

	cout << get<0>(x) << endl;
	cout << get<1>(x) << endl;
	cout << get<2>(x) << endl;
	cout << get<3>(x) << endl;
	cout << get<4>(x) << endl;
	cout << get<5>(x) << endl;
	cout << get<6>(x) << endl;


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;

int main()
{
	int n;

	cout << "kac tamsayi : ";
	cin >> n;

	int *p = (int *)operator new(n * sizeof(int));
	for (int k = 0; k < 10; ++k)
		p[k] = k;
	operator delete(p);

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;

class Myclass {
	int a, b, c;
public:
	Myclass() {
		cout << "Myclass::constructor" << endl;
		cout << "this     =   " << this << endl;
		cout << sl;
	}

	~Myclass() {
		cout << "Myclass::destructor" << endl;
		cout << "this     =   " << this << endl;
		cout << sl;
	}

	void *operator new(size_t n)
	{
		cout << "Myclass::operator new()" << endl;
		cout << "n =  " << n << endl;
		void *vp = malloc(n);
		cout << "elde edilen adres = " << vp << endl;
		cout << sl;
		return vp;
	}

	void operator delete(void *vp)
	{
		cout << "operator delete" << endl;
		cout << "vp = " << vp << endl;
		free(vp);
		cout << sl;
	}
};

int main()
{
	Myclass *p = new Myclass;
	delete p;

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;

class Myclass {
	int a, b, c;
	static unsigned char buffer[];
	static bool flags[];
	const static unsigned int csimax = 100;

public:
	Myclass() : a(0), b(0), c(0) {}

	void *operator new(size_t n)
	{
		int k;

		for (k = 0; k < csimax; k++) {
			if (!flags[k])
				break;
		}
		if (k == csimax)
			throw bad_alloc();

		flags[k] = true;

		return buffer + k * sizeof(Myclass);
	}

	void operator delete(void *vptr)
	{
		if (vptr == nullptr)
			return;
		flags[((unsigned char *)vptr - buffer) / sizeof(Myclass)] = false;
	}
////
};


unsigned char Myclass::buffer[csimax * sizeof(Myclass)];
bool Myclass::flags[csimax] = { false };


int main()
{
	Myclass *p = new Myclass;

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <ctime>
#include <iomanip>
#include <tuple>
#include "date.h"

using namespace std;

class Myclass {
	int a, b, c;
public:
	Myclass() : a(0), b(0), c(0) {
		cout << "this : " << this << endl;
	}
	~Myclass()
	{
		cout << "must be called destructor" << endl;
	}
};


int main()
{
	char temp[sizeof(Myclass)];

	cout << "temp adresi " << (void *)temp << endl;

	Myclass *p = new (temp)Myclass;
	////
	p->~Myclass();

	


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////















