










///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


int main()
{
	string s{ "bugungunlerdenpazar" };
	sort(s.begin(), s.end(), greater<char>());
	cout << s << endl;


	

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


int main()
{
	deque<Date> x;
	randomize();

	fc(x, 10, &Date::random);

	sort(x.begin(), x.end(), greater<Date>());
	display(x);


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


int main()
{
	deque<Date> x;
	randomize();

	fc(x, 10, &Date::random);

	sort(x.begin(), x.end(), [](const Date &d1, const Date &d2) {return d1.getMonthDay() < d2.getMonthDay();});

	display(x);


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;



int main()
{
	vector<string> svec;

	fc(svec, 200, rs);
	partial_sort(svec.begin(), svec.begin() + 5, svec.end());

	display(svec);


	

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;



int main()
{
	vector<string> svec;

	fc(svec, 50, rs);
	display(svec);
	char c;

	cout << "hangi harfe gore partisyon yapilsin : ";
	cin >> c;

	auto iter = partition(svec.begin(), svec.end(), [c](const string &r) {return r.find(toupper(c)) != string::npos || r.find(tolower(c)) != string::npos;});
	display(svec);
	cout << *iter << endl;


	

	return 0;
}