



///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


class Myclass {
public:
	static int func(int val)
	{
		return val * val + 1;
	}

};

int main()
{
	int(*fp)(int) = &Myclass::func;

	cout << fp(10) << endl;

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


class Myclass {
public:
	int func(int val)
	{
		cout << "this = " << this << endl;
		return val * val + 1;
	}

};

int main()
{
	int(Myclass::*fp)(int) = &Myclass::func;
	auto fx = &Myclass::func;
	Myclass m;
	cout << "&m = " << &m << endl;

	cout << (m.*fp)(20) << endl;

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


class Myclass {
public:
	int func(int val)
	{
		cout << "this = " << this << endl;
		return val * val + 1;
	}

};

int main()
{
	int(Myclass::*fp)(int) = &Myclass::func;
	auto fx = &Myclass::func;
	Myclass m;
	cout << "&m = " << &m << endl;

	cout << (m.*fp)(20) << endl;

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


class Myclass {
public:
	int func(int val)
	{
		return val * val + 1;
	}

};

int main()
{
	auto fx = &Myclass::func;
	Myclass *p = new Myclass;

	cout << (p->*fx)(20) << endl;

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;



int main()
{
	vector<string> svec;
	randomize();
	fc(svec, 10, rs);
	string s;
	cout << "bir giris yapin : ";
	cin >> s;

	transform(svec.begin(), svec.end(), svec.begin(), [s](string &r) {return r + s;});

	display(svec);

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;



int main()
{
	randomize();
	vector<string> svec;
	set<string> myset;


	fc(myset, 10, rs);
	display(myset);
	fc(svec, 10, rs);
	sort(svec.begin(), svec.end());
	display(svec);

	//set_union(myset.begin(), myset.end(), svec.begin(), svec.end(), ostream_iterator<string>(cout, "\n"));
	//set_intersection(myset.begin(), myset.end(), svec.begin(), svec.end(), ostream_iterator<string>(cout, "\n"));
	//set_difference(myset.begin(), myset.end(), svec.begin(), svec.end(), ostream_iterator<string>(cout, "\n"));
	set_symmetric_difference(myset.begin(), myset.end(), svec.begin(), svec.end(), ostream_iterator<string>(cout, "\n"));



	

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


int main()
{
	string s{ "bugungunlerdenpazar" };
	sort(s.begin(), s.end(), greater<char>());
	cout << s << endl;


	

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


int main()
{
	deque<Date> x;
	randomize();

	fc(x, 10, &Date::random);

	sort(x.begin(), x.end(), greater<Date>());
	display(x);


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;


int main()
{
	deque<Date> x;
	randomize();

	fc(x, 10, &Date::random);

	sort(x.begin(), x.end(), [](const Date &d1, const Date &d2) {return d1.getMonthDay() < d2.getMonthDay();});

	display(x);


	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;



int main()
{
	vector<string> svec;

	fc(svec, 200, rs);
	partial_sort(svec.begin(), svec.begin() + 5, svec.end());

	display(svec);


	

	return 0;
}
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
#include <vector>
#include <initializer_list>
#include <string>
#include <deque>
#include <algorithm>
#include "date.h"
#include "cupa.h"
#include <iostream>
#include <list>
#include <functional>
#include <set>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>

using namespace std;



int main()
{
	vector<string> svec;

	fc(svec, 50, rs);
	display(svec);
	char c;

	cout << "hangi harfe gore partisyon yapilsin : ";
	cin >> c;

	auto iter = partition(svec.begin(), svec.end(), [c](const string &r) {return r.find(toupper(c)) != string::npos || r.find(tolower(c)) != string::npos;});
	display(svec);
	cout << *iter << endl;


	

	return 0;
}