/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
						30.05.2015 Cumartesi

#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main()
{
	int **pd;
	int row, col;
	int i, k;

	printf("matrisin satir ve sutun sayisi : ");
	scanf("%d%d", &row, &col);

	pd = (int **)malloc(row * sizeof(int *));
	if (pd == NULL) {
		printf("bellek yetersiz\n");
		return 1;
	}

	for (i = 0; i < row; i++) {
		pd[i] = (int *)malloc(col * sizeof(int));
		if (pd[i] == NULL) {
			printf("bellek yetersiz\n");
			return 1;
		}
	}

	srand((unsigned)time(0));

	for (i = 0; i < row; i++) {
		for (k = 0; k < col; k++) {
			pd[i][k] = rand() % 10;
		}
	}

	///////

	for (i = 0; i < row; i++) {
		for (k = 0; k < col; k++) {
			printf("%d", pd[i][k]);
		}
		printf("\n");
	}

	for (i = 0; i < row; i++)
		free(pd[i]);

	free(pd);

	return 0;	
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main()
{
	cout << "matrisin satir ve sutun sayisi : ";
	int row, col;
	cin >> row >> col;

	auto pd = new int *[row];
	
	for (int i = 0; i < row; ++i)
		pd[i] = new int[col];

	srand(static_cast<unsigned int>(time(nullptr)));

	for (int i = 0; i < row; i++) {
		for (int k = 0; k < col; k++) {
			pd[i][k] = rand() % 10;
		}
	}
	//////

	for (int i = 0; i < row; i++) {
		for (int k = 0; k < col; k++) {
			cout << pd[i][k];
		}
		cout << "\n";
	}

	for (int i = 0; i < row; i++)
		delete[]pd[i];

	delete[]pd;

	return 0;	
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//////necati.h

#ifdef __cplusplus
	extern "C" {
#endif

void sl(void);
void delay(double);
void swap(int *p1, int *p2);
void randomize(void);
void setRandomArray(int *p, int size);
void displayArray(const int *p, int size);
void gswap(void *vp1, void *vp2, size_t n);
void bprint(int val);

#ifdef __cplusplus
	}
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


/////// date.h
int d = 23;

class Date{
	int d, m, y;
public:
	void set(int day, int mon, int year);
};


/////// date.cpp

//#include "date.h"

void Date::set(int day, int mon, int year)
{

	d++;

}

mydate.set()

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
seimlerden bir hafta ncesi
31 Mays 2015 Pazar

#include <iostream>
#include <string>

using namespace std;

class Myclass {
public:
	void func();
};

void Myclass::func()
{
	cout << "Myclass::func()" << endl;
	cout << "this   :   " << this << endl;
}



int main()
{
	Myclass m;

	cout << "&m      = " << &m << endl;
	m.func();

	return 0;
}




////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

class Myclass {
public:
	void func();
};

void Myclass::func()
{
	cout << "Myclass::func()" << endl;
	cout << "this   :   " << this << endl;
}



int main()
{
	Myclass *p = new Myclass;

	cout << "p    =   " << p << endl;
	p->func();

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

class Myclass {
public:
	void func();
	void foo();
};

void Myclass::func()
{	
	cout << "Myclass::func() cagrildi\n";
	cout << "this     : " << this << endl;
	foo();
}

void Myclass::foo()
{
	cout << "Myclass::foo() cagrildi\n";
	cout << "this     : " << this << endl;
}


int main()
{
	Myclass m;

	cout << "&m    =   " << &m << endl;
	m.func();

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;




class Myclass {
public:
	void func();
	void foo();
};

void g(Myclass *p)
{
	cout << "global g islevi" << endl;

}
void Myclass::func()
{	
	cout << "Myclass::func() cagrildi\n";
	cout << "this     : " << this << endl;
	g(this);
}

void Myclass::foo()
{
	cout << "Myclass::foo() cagrildi\n";
	cout << "this     : " << this << endl;
}


int main()
{
	Myclass m;

	cout << "&m    =   " << &m << endl;
	m.func();

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;




class Myclass {
public:
	void func();
};

void func()
{
	cout << "func() cagrildi\n";
}

void Myclass::func()
{	
	func();  //recursive call to member function
	::func(); //global func function
}



int main()
{

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class Myclass {
public:
	void func();
};

void func(int x)
{
	cout << "func(int) cagrildi\n";
}

void Myclass::func()
{
	func(10);    //error Myclass::func has no formal parameter
}


#include <iostream>
#include <string>

using namespace std;




class Myclass {
public:
	void func();  //1
	void func(int); //2
	void func(int, int);  //3


};

int main()
{
	Myclass m;

	m.func();  //1
	m.func(12); //2
	m.func(12, 45); //3

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;




class Myclass {
public:
	void foo();
	void func();  //1
	void func(int); //2
	void func(int, int);  //3
};

void Myclass::foo()
{
	func();
	func(1);
	func(1, 3);
}

int main()
{

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <string>

using namespace std;




class Myclass {
	void func(int, int);  
public:
	void foo();
	void func();  
};


int main()
{
	Myclass m;

	m.func();
	m.func(10, 20);  //function overloading - error private access

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;




class Myclass {
	int m1, m2;
public:
	void foo()const;
};


////
void Myclass::foo()
{
	m1 = 10;  //gecersiz
}


int main()
{

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;




class Myclass {
	int m1, m2;
public:
	void foo()const;
	void func();

};


////
void Myclass::foo()const
{
	func();  //geersiz - const ye ilev const olmayan ye ilevi aramaz
}


int main()
{

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;




class Myclass {
	int m1, m2;
public:
	void foo();
	void func()const;

};


////
void Myclass::foo()
{
	func();  //geerli
}


int main()
{

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;




class Myclass {
	int m1, m2;
public:
	void foo()const;
	void func();


};


////

int main()
{
	Myclass m;
	m.func();
	m.foo();


	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;




class Myclass {
	int m1, m2;
public:
	void foo()const;
	void foo();
};

void Myclass::foo()const
{
	cout << "void Myclass::foo()const" << endl;
}

void Myclass::foo()
{
	cout << "void Myclass::foo()" << endl;
}

int main()
{
	Myclass m1;
	const Myclass m2;

	m1.foo();
	m2.foo();

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;




class Myclass {
	int m1, m2;
public:
	void foo();
};

void f1(Myclass *ptr);
void f2(Myclass &r);


void Myclass::foo()
{
	////
	f1(this);
	f2(*this);
}


int main()
{
	Myclass m;
	m.foo();

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;




class Myclass {
	int m1, m2;
public:
	void foo();
	Myclass &func();
};


Myclass &Myclass::func()
{
	///////
	return *this;
}



int main()
{
	Myclass m;

	m.func().foo();

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;




int main()
{
	int x = 10;
	double d = 7.8;

	cout << x << " ----  " << d;
	
	cout.operator<<(x).operator<<(" ---- ").operator<<(d);


	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;

class Ostream {
public:
	Ostream &operator<<(int);
	Ostream &operator<<(const char *p);
	Ostream &operator<<(double);


};

////////
Ostream &Ostream::operator<<(int x)
{
	///x'i ekrana yazdiran kod
	return *this;
}

Ostream &Ostream::operator<<(const char *p)
{
	///yaziyi ekrana yazdiran kod
	return *this;
}

Ostream &Ostream::operator<<(double d)
{
	///double degeri ekrana yazdiran kod
	return *this;
}



int main()
{
	Ostream cout;
	int x = 13;
	double d = 4.5;

	//cout.operator<<(x).operator<<(" ----").operator<<(d);
	cout << x << " ----- " << d;
	


	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;

class Data{
public:
	Data *func();
	void foo();

};

Data *Data::func()
{
	/////////
	return this;
}

int main()
{
	Data mydata;

	mydata.func()->foo();

	(*mydata.func()).foo();



	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;

class Data{
public:
	Data &func();
	void foo();

};

Data &Data::func()
{
	/////////
	return *this;
}

int main()
{
	Data mydata;

	mydata.func().foo();

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;

class Data{
public:
	void func(Data &r);
};

void Data::func(Data &r)
{
	cout << "this    =  " << this << endl;
	cout << "&r      =  " << &r << endl;
}



int main()
{
	Data mydata;
	Data x;

	cout << "&mydata   : " << &mydata << endl;
	cout << "&x        : " << &x << endl;

	mydata.func(x);

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>

using namespace std;

class Matrix{
public:
	Matrix sum(const Matrix &r)const;
};



int main()
{
	Matrix m1;
	Matrix m2;

	return 0;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

class Account {

public:
	///
	void transfer(Account &r, double sum);
};

int main()
{
	Account necati;
	Account sina;

	necati.transfer(sina, 1000);


	return 0;
}