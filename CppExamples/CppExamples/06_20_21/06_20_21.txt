/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

				20 Haziran 2015 Cumartesi

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;



class Data{
	int mx = 3; //C++11 ve sonrasi
	int my = 5;
public:
	void display()const
	{
		cout << mx << "\n" << my << endl;
	}
};


int main()
{
	Data mydata;

	mydata.display();

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

class Data {
	int mx, my;
public:
	Data(int a, int b) : mx{ a }, my{ b } 
	{
		cout << "Data::data(int, int)" << endl;
	}
	void display()const {
		cout << "mx = " << mx << endl;
		cout << "my = " << my << endl;
		cout << "***************************************" << endl;
	}

};



int main()
{
	Data data1{ 12, 56 };
	data1.display();
	Data data2(data1);
	data2.display();

	

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

class Data {
	int mx, my;
public:
	Data() {
		cout << "default constructor" << endl;
	}
	~Data() {
		cout << "destructor" << endl;
	}

};



int main()
{
	Data x;

	Data y(x);


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

class Data {
	int mx, my;
public:
	Data() {
		cout << "default constructor" << endl;
	}
	~Data() {
		cout << "destructor" << endl;
	}
};

void func(Data p)
{
	cout << "func cagrildi" << endl;
	cout << "func bitti" << endl;

}

int main()
{
	Data x;

	func(x);



	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

class Data {
	int mx, my;
public:
	Data() {
		cout << "default constructor" << endl;
	}
	Data(const Data &r) {
		cout << "copy constructor" << endl;
	}
	~Data() {
		cout << "destructor" << endl;
	}
};

void func(Data p)
{
	cout << "func cagrildi" << endl;
	cout << "func bitti" << endl;

}

int main()
{
	Data x;

	func(x);

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

class Data {
	int mx, my;
public:
	Data() {
		cout << "default constructor" << endl;
	}
	Data(const Data &r) {
		cout << "copy constructor" << endl;
		cout << "this    = " << this << endl;
		cout << "&r      = " << &r << endl;

		cout << "---------------------------------------------" << endl;

	}
	~Data() {
		cout << "destructor" << endl;
	}
};

int main()
{
	Data data1;
	cout << "&data1   =  " << &data1 << endl;
	Data data2(data1);
	cout << "&data2   =  " << &data2 << endl;


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <cstring>


using namespace std;

class Sentence {
	size_t mlen;
	char *mp;
public:
	Sentence(const char *p) : mlen(strlen(p)), mp(new char[mlen + 1]) {
		strcpy(mp, p);
	}

	~Sentence() {
		delete[]mp;
	}

	void display()const
	{
		cout << mp << endl;
	}
	size_t len()const
	{
		return mlen;
	}
	///
};


int main()
{
	Sentence s1("seni cok seviyorum benim sevgili kopegim");
	s1.display();
	cout << s1.len() << endl;

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <cstring>


using namespace std;

class Sentence {
	size_t mlen;
	char *mp;
public:
	Sentence(const char *p) : mlen(strlen(p)), mp(new char[mlen + 1]) {
		strcpy(mp, p);
	}

	~Sentence() {
		delete[]mp;
	}

	void display()const
	{
		cout << mp << endl;
	}
	size_t len()const
	{
		return mlen;
	}
	///
};


int main()
{
	Sentence s1("seni cok seviyorum benim sevgili kopegim");
	
	if (s1.len() > 20) {
		Sentence s2(s1);
		s2.display();
		getchar();
	}

	s1.display();


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <cstring>


using namespace std;

class Sentence {
	size_t mlen;
	char *mp;
public:
	Sentence(const char *p) : mlen(strlen(p)), mp(new char[mlen + 1]) {
		strcpy(mp, p);
	}

	~Sentence() {
		delete[]mp;
	}

	void display()const
	{
		cout << mp << endl;
	}
	size_t len()const
	{
		return mlen;
	}
	///
};

void func(Sentence s)
{
	cout << "uzunluk : " << s.len() << endl;
	getchar();
}

int main()
{
	Sentence s1("bugun gunlerden cumartesi");
	
	func(s1);

	s1.display();


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <cstring>


using namespace std;

class Sentence {
	size_t mlen;
	char *mp;
public:
	Sentence(const char *p) : mlen(strlen(p)), mp(new char[mlen + 1]) {
		strcpy(mp, p);
	}
	Sentence(const Sentence &r) : mlen(r.mlen), mp(new char[mlen + 1])
	{
		strcpy(mp, r.mp);
	}

	~Sentence() {
		delete[]mp;
	}

	void display()const
	{
		cout << mp << endl;
	}
	size_t len()const
	{
		return mlen;
	}
	///
};


int main()
{
	Sentence s1("seni cok seviyorum benim sevgili kopegim");

	if (s1.len() > 20) {
		Sentence s2(s1);
		s2.display();
		getchar();
	}

	s1.display();

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <cstring>


using namespace std;


class Neco {


};

int main()
{
	Neco n1;
	Neco n2(n1);
	Neco n3;

	n2 = n3;


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


class Neco {
public:
	Neco() {
		cout << "default constructor" << endl;
	}

	Neco(const Neco &r) {
		cout << "copy constructor" << endl;
	}
	Neco &operator=(const Neco &r)
	{
		cout << "assignment op. function " << endl;
		return *this;
	}

	~Neco() {
		cout << "destructor" << endl;
	}

};

int main()
{
	Neco n1;
	Neco n2(n1);
	Neco n3;

	n2.operator=(n3);   // n2 = n3;


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


#include <iostream>
#include <cstring>


using namespace std;

class Sentence {
	size_t mlen;
	char *mp;
public:
	Sentence(const char *p) : mlen(strlen(p)), mp(new char[mlen + 1]) {
		strcpy(mp, p);
	}
	Sentence(const Sentence &r) : mlen(r.mlen), mp(new char[mlen + 1])
	{
		strcpy(mp, r.mp);
	}

	~Sentence() {
		delete[]mp;
	}
	
	Sentence &operator=(const Sentence &r)
	{
		if (this == &r)
			return *this;

		delete[]mp;
		mlen = r.mlen;
		mp = new char[mlen + 1];
		strcpy(mp, r.mp);
		return *this;
	}

	void display()const
	{
		cout << mp << endl;
	}
	size_t len()const
	{
		return mlen;
	}
	///
};


int main()
{
	Sentence s1("seni cok seviyorum benim sevgili kopegim");
	s1.display();

	s1 = s1;

	s1.display();

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////




class Myclass {
	Myclass deepCopy(const Myclass &r);
	void releaseResources();
public:
	///
	Myclass &operator=(const Myclass &r)
	{
		releaseResources();
		return deepCopy(r);
	}
	~Myclass()
	{
		releaseResources();
	}

	Myclass(const Myclass &r)
	{
		deepCopy(r);
	}

};

#include <iostream>

using namespace std;


#include <iostream>
#include <cstring>


using namespace std;

class Sentence {
	size_t mlen;
	char *mp;
	Sentence &deepCopy(const Sentence &r)
	{
		mlen = r.mlen;
		mp = new char[mlen + 1];
		strcpy(mp, r.mp);
		return *this;
	}
	void releaseResources()
	{
		delete[]mp;
	}

public:
	Sentence(const char *p) : mlen(strlen(p)), mp(new char[mlen + 1]) {
		strcpy(mp, p);
	}
	Sentence(const Sentence &r)
	{
		deepCopy(r);
	}

	~Sentence() 
	{
		
		releaseResources();
	}
	
	Sentence &operator=(const Sentence &r)
	{
		if (this == &r)
			return *this;
		releaseResources();
		return deepCopy(r);
	}

	void display()const
	{
		cout << mp << endl;
	}
	size_t len()const
	{
		return mlen;
	}
	///
};


int main()
{
	Sentence s1("seni cok seviyorum benim sevgili kopegim");
	s1.display();

	s1 = s1;

	s1.display();

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


#include <iostream>
#include <cstring>


using namespace std;

class Neco {
public:
	void func();
};

int main()
{
	Neco n1, n2;

	(n1 = n2).func();
	n1.operator=(n2).func();

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

		21 Haziran 2015 Pazar

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;


#include <iostream>
#include <cstring>

using namespace std;

class Neco {
public:
	const Neco& operator=(const Neco &r);
};

int main()
{
	Neco n1, n2, n3;
	/////

	//n1.operator=(n2).operator=(n3);

	n1 = n2 = n3;
	n1.operator=(n2.operator=(n3));


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

int generateAccountNo();

class Account {
	int account_no;
	double balance;
	string name;
public:
	Account(const Account &r) {
		account_no = generateAccountNo(); //?
	}
};

int main()
{


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h
class Myclass {
	static int a[];
public:
};

///////   myclass.cpp
int Myclass::a[10] = { 1, 3, 5, 6, };


int main()
{

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h
class A {
	int x = 5;
public:
};

class B {
	static int x = 5;  //gecersiz. Snfn static veri elemanna snf iinde (bir istisna dnda)
	//ilk deer verilemez
public:
};

int main()
{

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h
class Myclass {
public:
	static int x;
};


int main()
{
	Myclass m;
	Myclass *p = &m;

	m.x = 34; //gecerli
	p->x++;   ////gecerli
	Myclass::x = 67;


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h
class Myclass {
	static int sx;
	int mdata = sx;
public:

};

int Myclass::sx = 3245;

int main()
{


	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h
class Myclass {
	int mx;
	static int sval;
public:
	void func()const
	{
		//mx = 349;  //geersiz
		sval = 3563;  //geerli
	}
};

///cpp
int Myclass::sval = 0;

int main()
{

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h
class Myclass {
	int mx;
	static int sval;
public:
	static void func()
	{
		//mx = 45;  gecersiz
		sval = 3456;
	}
};

///cpp
int Myclass::sval = 0;

int main()
{

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h
class Myclass {
	int mx;
	static int sval;
public:
	void foo()
	{

	}
	static void func()
	{
		foo();  //snfn statik ilevleri non static ilevlerine ar yapamaz
	}
};

///cpp
int Myclass::sval = 0;

int main()
{

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h
class Myclass {
	int mx;
	static int sval;
public:
	static void foo()
	{

	}
	static void func()
	{
		foo();  //geerli
		//snfn static ye ilevleri birbirlerini arabilir
	}
};

///cpp
int Myclass::sval = 0;

int main()
{

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h
class Myclass {
public:
	static void foo()
	{
		cout << "void Myclass::foo()" << endl;
	}
	
	void func()
	{
		foo();
		this->foo();
		Myclass::foo();
	}
};

///cpp

int main()
{
	Myclass m;

	m.func();

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

///////
///////   myclass.h

class Myclass {
	int mx;
	static int ms_count;
public:
	Myclass() : mx(0) 
	{
		ms_count++;
	}
	Myclass(int x) : mx(x) 
	{
		ms_count++;
	}
	Myclass(const Myclass &r) : mx{ r.mx }
	{
		ms_count++;
	}

	~Myclass()
	{
		ms_count--;
	}
	void display()const;
	static int getObjectCount()
	{
		return ms_count;
	}
};

///myclass cpp
int Myclass::ms_count = 0;

void Myclass::display()const
{
	cout << "(" << mx << ")" << endl;
}





int main()
{
	cout << "hayattaki nesne sayisi : " << Myclass::getObjectCount() << endl;
	Myclass m1, m2;
	Myclass *p = new Myclass;
	cout << "hayattaki nesne sayisi : " << Myclass::getObjectCount() << endl;
	delete p;
	cout << "hayattaki nesne sayisi : " << Myclass::getObjectCount() << endl;

	return 0;
}