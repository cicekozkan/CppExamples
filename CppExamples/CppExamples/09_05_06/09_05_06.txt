
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T &x)
{
	cout << typeid(T).name() << endl; //const char [4]
}


int main()
{
	func("ali");

	return 0;
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template<class T>
void func(T &x, T &y)
{
	cout << typeid(T).name() << endl; //const char [4]
}

int main()
{
	int a[5] = {0}, b[10] = {0};
	
	func(a, b)

	return 0;
}


#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T &x, T &y)
{
	cout << typeid(T).name() << endl; //const char [4]
}

int main()
{
	int a[5] = { 0 }, b[10] = { 0 };

	func(a, b);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T &x, T &y)
{
	cout << typeid(T).name() << endl; 
}

int main()
{
	int a[5] = { 0 }, b[10] = { 0 };

	func("aylin", "orhancan"); //gecersiz

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T, class U>
T func()
{
	U x;
	cout << typeid(T).name() << endl; 
	cout << typeid(U).name() << endl;

}

int main()
{
	func<int, double>();

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<typename T>
T getmax(const T *p, size_t size)
{
	T max{ *p };
	for (size_t k = 0; k < size; k++)
		if (p[k] > max)
			max = p[k];

	return max;
}

int main()
{

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<typename T>
T getmax(const T *p, size_t size)
{
	T max{ *p };
	for (size_t k = 0; k < size; k++)
		if (p[k] > max)
			max = p[k];

	return max;
}

int main()
{
	int a[10] = { 1, 6, 7, 3 };

	cout << getmax(a, 10) << endl;

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<typename T>
void Swap(T &r1, T &r2)
{
	T temp{ r1 };
	r1 = r2;
	r2 = temp;
}

template<typename T>
void reverse(T *p, size_t size)
{
	size_t k;

	for (k = 0; k < size / 2; ++k)
		Swap(p[k], p[size - 1 - k]);
}

int main()
{
	int a[4] = { 1, 6, 7, 3 };

	reverse(a, 4);

	for (auto &x : a)
		cout << x << " ";


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template<class T>
void func(T x = 5)
{

}

////
int main()
{
	func();

	return 0;
}


#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x = 5)
{

}

////
int main()
{
	func();  //gecersiz.. varsayilan arguman ifadesinin trne bagli olaral
	//template tr parametresinin  hangi tr olduu karm yapilamaz.

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;


template<typename T>
void display(const T &x)
{
	for (int k = 0; k < sizeof(x) / sizeof(*x); ++k)
		cout << x[k] << " ";
	cout << endl;
}
////
int main()
{
	int a[10] = { 1, 4, 5, 2, 3, 9, 7, 6, 8, 10 };
	int b[5] = { 1, 3, 5, 7, 9 };

	display(a);
	display(b);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;


template<typename T>
void func(int (*fp)(T))
{
	cout << typeid(T).name() << endl;
	cout << typeid(fp).name() << endl;

}

int foo(double)
{
	return 0;
}

int main()
{
	func(&foo);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;


template<typename T, typename U>
void func(T (*fp)(U))
{
	cout << typeid(T).name() << endl;
	cout << typeid(U).name() << endl;

}

int foo(double)
{
	return 0;
}

int main()
{
	func(&foo);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x)
{
	cout << "template function " << endl;
	cout << "TYpe T is : " << endl;
}


void func(int x)
{
	cout << "nontemplate function... func(int)" << endl;
}


int main()
{
	func(34);
	func(5u);


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x)
{
	cout << "template function " << endl;
	cout << "TYpe T is : " << endl;
}


void func(int x)
{
	cout << "nontemplate function... func(int)" << endl;
}


int main()
{
	func(34);
	func(5u);


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x)
{
	cout << "template function " << endl;
	cout << "TYpe T is : " << endl;
}


void func(int x)
{
	cout << "nontemplate function... func(int)" << endl;
}


int main()
{
	//explicit template argument
	func<int>(10);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x)
{
	cout << "template function " << endl;
	cout << "TYpe T is : " << typeid(T).name() << endl;
}



int main()
{
	func(5.6);
	func(19);
	func('C');
	func(23L);
	func(12.f);


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

//template'ler  overload edilebilir:
template<class T>
void func(T x)
{
}

template<class T>
void func(T x, T y)
{
}


template<class T>
void func(T *ptr)
{
}


int main()
{

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x)
{
	cout << "func(T x)" << endl;
	cout << "Type T is : " << typeid(T).name() << endl;
}


template<class T>
void func(T *ptr)
{
	cout << "func(T *ptr)" << endl;
	cout << "Type T is : " << typeid(T).name() << endl;
}


int main()
{
	int x = 10;
	func(&x);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x)
{
	cout << "func(T x)" << endl;
	cout << "Type T is : " << typeid(T).name() << endl;
}


//template<class T>
//void func(T (*f)(double))
//{
//	cout << "func(T (*f)(double)" << endl;
//	cout << "type T is : " << typeid(T).name() << endl;
//}
//
int foo(double)
{
	return 1;
}

int main()
{
	func(&foo);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<typename T>
T Min(T x, T y)
{
	return x < y ? x : y;
}



int main()
{
	cout << Min(12, 5) << endl;
	cout << Min(2.3,56.7) << endl;
	string s1{ "mehmet" }, s2{ "aylin" };

	cout << Min(s1, s2) << endl;

	cout << Min("Zeynep", "Yasar") << endl;


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x)
{
	cout << typeid(T).name() << endl;
}

int  foo(int) { return 0; }

int main()
{
	int x = 10;
	const int y = 34;
	int *ptr = &x;
	const int *p = &y;
	int *const cp = &x;
	int a[10];
	int &r = x;
	const int cr = x;

	//func(x);
	//func(y);
	//func(ptr);
	//func(p);
	//func(cp);
	//func(a);
	//func(foo);
	//func(cr);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
6 EYLUL 2015 GUNLERDEN PAZAR

#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x)
{
	cout << typeid(T).name() << endl;
}

int  foo(int) { return 0; }

int main()
{
	int x = 10;
	const int y = 34;
	int *ptr = &x;
	const int *p = &y;
	int *const cp = &x;
	int a[10];
	int &r = x;
	const int cr = x;

	//func(x);
	//func(y);
	//func(ptr);
	//func(p);
	//func(cp);
	//func(a);
	//func(foo);
	//func(r);
	func("sadullah");

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T, class U>
void func(T (*fp)(U))
{
	cout << typeid(T).name() << endl;
	cout << typeid(U).name() << endl;

}

int foo(double) { return 0.; }

int main()
{
	func(&foo);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T, class U>
void func(T (*fp)(U))
{
	cout << typeid(T).name() << endl;
	cout << typeid(U).name() << endl;

}

void foo(int) { }

int main()
{
	func(&foo);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<typename T>
T add(const T &r1, const T &r2)
{
	return r1 + r2;
}

int main()
{
	cout << add(10, 45) << endl;
	string s1{ "Neco" }, s2{ "can" };
	cout << add(s1, s2) << endl;

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<typename R, typename T, typename U>
R add(const T &r1, const U &r2)
{
	return r1 + r2;
}

int main()
{
	cout << add<double>(5.6, 4) << endl;

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

auto func(int a, int b)->double
{
	return 3.4;
}


int main()
{

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

//artik C++11'de boyle yapabiliyoruz
template<typename T, typename U>
auto add(const T &r1, const U &r2)->decltype(r1 + r2)
{
	return r1 + r2;
}

int main()
{

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

//artik C++14
template<typename T, typename U>
auto add(const T &r1, const U &r2)
{
	return r1 + r2;
}

int main()
{
	cout << typeid(add(3, 5.6)).name() << endl;

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

//artik C++1
template<typename T, typename U>
auto add(const T &r1, const U &r2)->decltype(r1 + r2)
{
	return r1 + r2;
}

int main()
{
	cout << typeid(add(3, 5.6)).name() << endl;

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;


struct Sina {
	struct Orhan {

	};
	Orhan func();
};

Sina::Orhan Sina::func()
{
	return Orhan();
}

int main()
{

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;


struct Sina {
	struct Orhan {

	};
	Orhan func();
};

auto Sina::func()->Orhan
{
	return Orhan();
}

int main()
{

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
void func(T x)
{

}


void func(int x)
{

}

int main()
{
	func<>(10); //scope icinde non template function olsa da
	//derleyici yeni fonksiyon yazsin

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;


template<int low, int high>
int myrand()
{
	return rand() % (high - low + 1) + low;
}


int main()
{
	cout << myrand<10, 20>() << endl;

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;


template<class T>
T getmax(T x, T y)
{
	return x > y ? x : y;
}

//const char * tr iin zelletirme (specialization)
template<>
const char *getmax<const char *>(const char *p1, const char *p2)
{
	return strcmp(p1, p2) > 0 ? p1 : p2;
}


int main()
{
	cout << getmax("necati", "zeynep") << endl;

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
T func(T x)
{
	return x;
}

int main()
{
	int(*fp1)(int) = func;  //derleyici T trnn int oldugu cikarimini yapar
	double(*fp2)(double) = func;   //derleyici T trnn double oldugu cikarimini yapar


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
T func(T x)
{
	return x;
}

void foo(int(*fp)(int));

int main()
{
	foo(func); //derleyici foo islevinin parametresine bakarak T trnn ne oldugu cikarimini yapar


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>

using namespace std;

template<class T>
T func(T x)
{
	return x;
}

void foo(int(*fp)(int));    //1
void foo(double(*fp)(double));   //2


int main()
{
	//foo(func); gecersiz . c.a.h
	foo(func<int>);
	foo(func<double>);


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>


using namespace std;

template<typename Iter>
void display(Iter beg, Iter end)
{
	while (beg != end) {
		std::cout << *beg << " ";
		++beg;
	}
	std::cout << std::endl;
}

int main()
{
	int a[5] = { 1, 4, 6, 67, 5 };

	display(a, a + 5);
	reverse(a, a + 5);
	display(a, a + 5);
	sort(a, a + 5);
	display(a, a + 5);



	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>


using namespace std;

template<typename Iter>
void display(Iter beg, Iter end)
{
	while (beg != end) {
		std::cout << *beg << " ";
		++beg;
	}
	std::cout << std::endl;
}

int main()
{
	double a[5] = { 1., 2.4, .6, 6.7, 5. };

	display(a, a + 5);
	reverse(a, a + 5);
	display(a, a + 5);
	sort(a, a + 5);
	display(a, a + 5);



	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>
#include <list>



using namespace std;

template<typename Iter>
void display(Iter beg, Iter end)
{
	while (beg != end) {
		std::cout << *beg << " ";
		++beg;
	}
	std::cout << std::endl;
}

int main()
{
	list<string> mylist{ "murat", "niyazi", "ayca", "veli" };
	display(mylist.begin(), mylist.end());

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>
#include <list>

using namespace std;

//typedef pair<int, string> ispair;


int main()
{
	ispair p1, p2;

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

template<typename T, typename U = int>
class Myclass {

};

int main()
{
	Myclass<int, double> m1;
	Myclass<char> m2;


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

template<typename T, typename U = T>
class Myclass {

};

int main()
{

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

template<typename T>
class Myclass {

};


template<typename T, typename U = Myclass<T> > 
class Sample {

};

int main()
{

	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////




namespace std {
	template<typename T, typename U = std::allocator<T>>
	class vector {
	
	};

}


namespace std {
	 template <typename T, typename U = std::char_traits<T>, typename M = std::allocator<T>>
	 class basic_string {
	 
	 };

	 typedef basic_string<char> string;
	

}


#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

template<typename T = int, int size = 500>
class Myclass {

};


int main()
{
	Myclass<double> x1;
	Myclass<long, 400> x2;
	Myclass <>x3;


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

template<typename T = int, typename U>
class Myclass {

};


int main()
{


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

template<typename T>
class Myclass {

};


int main()
{
	Myclass<double> m1;
	Myclass<int> m2;

	m1 = m2;  //gecersiz


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

template<typename T>
class Myclass {
	T mx;
public:
	Myclass(const T &r) : mx{r} {}
	T get()const { return mx; }
	void set(const T &r);
	Myclass &operator=(const Myclass &r)
	{
		mx = r.mx;
		return *this;
	}
};

template<typename T>
void Myclass<T>::set(const T &r)
{
	mx = r;
}


int main()
{
	


	return 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

template<typename T>
class Myclass {
	T mx;
public:
	Myclass(const T &r) : mx{r} {}
	T get()const { return mx; }
	void set(const T &r);
	Myclass &operator=(const Myclass &r);
};

template<typename T>
Myclass<T> &Myclass<T>::operator=(const Myclass &r)
{
	mx = r.mx;
}

template<typename T>
void Myclass<T>::set(const T &r)
{
	mx = r;
}


int main()
{
	


	return 0;
}