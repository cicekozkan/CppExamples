///////////////////////////////////////////////


			1 Austos 2015 Cumartesi

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////

class Base {
public:
	void f1();
	void f2();
};


class Der : public Base{
public:
	void f3();
};


int main()
{
	Der myder;
	myder.f1();
	myder.f2();
	myder.f3();


	return 0;
}
///////////////////////////////////////////////


int mx;

class Base {
	int mx;
public:
	
};


class Der : public Base{
	int mx;
public:
	void func(int x)
	{
		int mx;

		mx = 10;
	}
};


int main()
{

	

	return 0;
}
///////////////////////////////////////////////



class Base {
public:
	void func();
};


class Der : public Base{
public:
	void func(int x)
	{
		func();  //gecersiz
	}
};


int main()
{

	

	return 0;
}
///////////////////////////////////////////////



class Base {
public:
	void func(int);
};


class Der : public Base{
public:
	void func(int x)
	{
		func(10);   //recursive call
		Base::func(10);  //Base::func(int)
	}
};


int main()
{

	

	return 0;
}
///////////////////////////////////////////////



class Base {
	int mx, my;
public:
	void func(int);
};


class Der : public Base{
	int mz, mt;
public:
};


int main()
{
	Der myder;
	Base *ptr = &myder;
	Base &r = myder;
	Base mybase;

	mybase = myder;  //ileride dikkat!

	return 0;
}
///////////////////////////////////////////////



class Employee {
public:
};


class Manager : public Employee {

};


class SalesManager : public Manager {

};


class Driver : public Employee {

};

class Cook : public Employee {

};

int main()
{
	Employee *ptr;
	Manager m;
	SalesManager sm;
	Driver dr;
	Cook c;

	ptr = &m;
	ptr = &sm;
	ptr = &dr;
	ptr = &c;

	Employee &er1 = m;
	Employee &er2 = sm;
	Employee &er3 = dr;
	Employee &er4 = c;

	return 0;
}
///////////////////////////////////////////////



class Employee {
public:
};


class Manager : public Employee {

};


class SalesManager : public Manager {

};


class Driver : public Employee {

};

class Cook : public Employee {

};

int main()
{
	Employee *emp;
	SalesManager sm;

	emp = &sm;

	/////////////////////////
	SalesManager *smp;
	smp = static_cast<SalesManager *>(emp);  //gecerli

	return 0;
}
///////////////////////////////////////////////



class Base {
	int a, b, c, d;
public:
};


class Der : public Base {
	double d1, d2;
public:
};


Der *func();

int main()
{
	Der *dptr = func();
	Base *bptr = func();

	return 0;
}
///////////////////////////////////////////////



class Base {
	int a, b, c, d;
public:
};


class Der : public Base {
	double d1, d2;
public:
};


Der &func();

int main()
{
	Der &r = func();
	Base &rb = func();

	return 0;
}
///////////////////////////////////////////////



class Base {
	int a, b, c, d;
public:
	Base &func();
};


class Der : public Base {
	double d1, d2;
public:
};



int main()
{
	Der myder;

	Base &rb = myder.func();
	Der &dr = myder.func();  //gecersiz

	return 0;
}
///////////////////////////////////////////////



class Base {
public:
	
};


class Der : public Base {
public:
};



int main()
{
	Der myder;

	return 0;
}
///////////////////////////////////////////////

#include <iostream>

using namespace std;

class Base {
public:
	Base()
	{
		cout << "Base::default constructor" << endl;
	}
};


class Der : public Base {
public:
};



int main()
{
	Der myder;

	return 0;
}
///////////////////////////////////////////////

#include <iostream>

using namespace std;

class Base {
public:
	Base()
	{
		cout << "Base::default constructor" << endl;
	}
};


class Der1 : public Base {
public:
	Der1()
	{
		cout << "Der1::default constructor" << endl;

	}
};


class Der2 : public Der1 {
public:
	Der2()
	{
		cout << "Der2::default constructor" << endl;

	}
};


int main()
{
	Der2 myder2;

	return 0;
}
///////////////////////////////////////////////


#include <iostream>

using namespace std;

class Elem {
public:
	Elem()
	{
		cout << "Elem::default constructor" << endl;
	}
};

class Base {
public:
	Base()
	{
		cout << "Base::default constructor" << endl;
	}
};


class Der1 : public Base {
public:
	Der1()
	{
		cout << "Der1::default constructor" << endl;

	}
};


class Der2 : public Der1 {
	Elem x;
public:
	Der2()
	{
		cout << "Der2::default constructor" << endl;

	}
};


int main()
{
	Der2 myder2;

	return 0;
}
///////////////////////////////////////////////

#include <iostream>
#include <string>


using namespace std;


class Employee{
	string name;
public:
	Employee() : name{ "ahmet" } {}
	Employee(const string &r) : name{ r } {}
	string getname()const { return name; }
};




int main()
{
	Employee e("Murtaza");

	cout << e.getname() << endl;




	return 0;
}
///////////////////////////////////////////////

#include <iostream>
#include <string>


using namespace std;


class Employee{
	string name;
public:
	Employee() : name{ "ahmet" } {}
	Employee(const string &r) : name{ r } {}
	string getname()const { return name; }
};


class Manager : public Employee {
	int age;
public:
	Manager() : age(35) {}
	void display() const {
		cout << "isim : " << getname() << endl;
		cout << "yas  : " << age << endl;

	}
};



int main()
{
	Manager m;

	m.display();

	



	return 0;
}
///////////////////////////////////////////////

#include <iostream>
#include <string>


using namespace std;


class Employee{
	string m_name;
	int m_age;
public:
	Employee(const string &name, int age) : m_name(name), m_age(age) {}
	///
};


class Manager : public Employee {
	string m_dept;
public:
	Manager(const string &name, int age, const string dept) : Employee(name, age), m_dept(dept) {
		cout << "Manager constructor code " << endl;
	}
};



int main()
{
	Manager m("ali", 34, "satis");
	//////



	return 0;
}
///////////////////////////////////////////////

///inherited constructor zeellii C++11

#include <iostream>
#include <string>


using namespace std;


class Base{
public:
	Base(int);
	Base(int, int);
	Base(const string &);
};

class Der : public Base {
public:
	using Base::Base;
};

int main()
{
	Der d1(10);
	Der d2(10, 20);
	Der d3("Necati");


	return 0;
}
///////////////////////////////////////////////

#include <iostream>
#include <string>


using namespace std;


class Base{
public:
	Base(int);
	Base(int, int);
	Base(const string &);
};

class Der : public Base {
public:
	using Base::Base;
	Der(int, int);
};

int main()
{
	Der d1(10);
	Der d2(10, 20);
	Der d3("Necati");


	return 0;
}
///////////////////////////////////////////////

#include <iostream>
#include <string>


using namespace std;


class Base{
public:
	Base() {
		cout << "Base constructor" << endl;
	}

	~Base() {
		cout << "Base destructor" << endl;
	}
};

class Der : public Base {
public:
	Der() {
		cout << "Der constructor" << endl;
	}

	~Der() {
		cout << "Der destructor" << endl;
		////
	}
};

int main()
{
	Der myder;


	return 0;
}
///////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			2 Austos 2015 Pazar

///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>

class Base {
public:
	void func(int);
};

class Der : public Base{
public:
	void func();
};

int main()
{
	Der myder;

	//myder.func(12); //geersiz
	myder.Base::func(12);

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>

class Base {
public:
	void func(int);
};

class Der : public Base{
public:
	using Base::func;
	void func();
};

int main()
{
	Der myder;

	myder.func(12);  //gecerli


	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>

class Base {
public:
	Base() = delete;  //C++11
};


class Der : public Base {

};

int main()
{
	Der myder;

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Base {
public:
	Base() 
	{
		cout << "Base::Base()" << endl;
	}
};


class Der : public Base {
public:

};


int main()
{
	Der d1;
	Der d2(d1);

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Base {
public:
	Base() 
	{
		cout << "Base::Base()" << endl;
	}

	Base(const Base &)
	{
		cout << "Base::Base(const Base &)" << endl;
	}
};


class Der : public Base {
public:

};


int main()
{
	Der d1;
	Der d2(d1);

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Base {
public:
	Base() 
	{
		cout << "Base::Base()" << endl;
	}

	Base(const Base &)
	{
		cout << "Base::Base(const Base &)" << endl;
	}
};


class Der : public Base {
public:
	Der() {}
	Der(const Der &r) 
	{
	}

};


int main()
{
	Der d1;
	Der d2(d1);

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Base {
public:
	Base() 
	{
		cout << "Base::Base()" << endl;
	}

	Base(const Base &)
	{
		cout << "Base::Base(const Base &)" << endl;
	}
};


class Der : public Base {
public:
	Der() {}
	Der(const Der &r) : Base(r)  //upcasting
	{
	}

};


int main()
{
	Der d1;
	Der d2(d1);

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
class Base {
public:
	Base &operator=(const Base &r)
	{
		cout << "Base::operator=(const Base &r)" << endl;
		return *this;
	}
};


class Der : public Base {
public:
	
};


int main()
{
	Der d1, d2;

	d1 = d2;

	return 0;
}

#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Base {
public:
	Base &operator=(const Base &r)
	{
		cout << "Base::operator=(const Base &r)" << endl;
		return *this;
	}
};


class Der : public Base {
public:
	Der &operator=(const Der &r)
	{
		cout << "Der::operator=(const Der &r)" << endl;
		Base::operator=(r);

		//((Base *)this)->operator=(r);  dogru ama gerek yok

		return *this;
	}
};


int main()
{
	Der d1, d2;

	d1 = d2;

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Base {
public:
	static void sfunc();
};

class Der : public Base {
public:

};

int main()
{
	Base::sfunc();
	Der::sfunc();

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Base {
public:
	static void sfunc();
};

class Der : public Base {
public:
	static void sfunc();
};

int main()
{
	Der::sfunc(); //Der::sfunc()
	Der::Base::sfunc();


	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Base {
public:
	static void sfunc();
};

class Der : public Base {
public:
	static void sfunc();
};

int main()
{
	Base mybase;
	Der myder;

	mybase.sfunc();  //Base::sfunc
	myder.sfunc();   //Der::sfunc

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>


using namespace std;

class Employee {
public:
	virtual void display()const {
		cout << "I am an employee " << endl;
	}
};

class Manager : public Employee {
public:
	void display()const {
		cout << "I am a Manager " << endl;
	}
};


class Driver : public Employee {
public:
	void display()const {
		cout << "I am a driver " << endl;
	}
};


class Cook : public Employee {
public:
	void display()const {
		cout << "I am a cook" << endl;
	}
};

void func(Employee *ptr)
{
	ptr->display();
}

int main()
{
	srand((unsigned)time(nullptr));

	for (;;) {
		switch (rand() % 3) {
		case 0: cout << "Case Manager " << endl; func(new Manager); break;
		case 1: cout << "Case Driver " << endl; func(new Driver); break;
		case 2: cout << "Case Cook " << endl; func(new Cook); break;
		}
		getchar();
	}

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>


using namespace std;

class Employee {
public:
	virtual void display()const {
		cout << "I am an employee " << endl;
	}
};

class Manager : public Employee {
public:
	void display()const {
		cout << "I am a Manager " << endl;
	}
};


int main()
{
	Employee *ptr;
	Manager m;

	ptr = &m;

	ptr->display();

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>


using namespace std;

class Employee {
public:
	virtual void display()const {
		cout << "I am an employee " << endl;
	}
};

class Manager : public Employee {
public:
	void display()const {
		cout << "I am a Manager " << endl;
	}
};

void func(Employee *ptr)
{
	////
	ptr->display();
}

int main()
{
	Manager m;

	func(&m);

	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>


using namespace std;

class Employee {
public:
	virtual void display()const {
		cout << "I am an employee " << endl;
	}
};

class Manager : public Employee {
public:
	void display()const {
		cout << "I am a Manager " << endl;
	}
};

void func(Employee *ptr)
{
	////
	ptr->display();
}

int main()
{
	Manager m;
	Employee &r = m;

	r.display();
	
	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>


using namespace std;

class Employee {
public:
	virtual void display()const {
		cout << "I am an employee " << endl;
	}
	void nfunc()
	{
		cout << "Employee::nfunc" << endl;
		display();
	}
};

class Manager : public Employee {
public:
	void display()const {
		cout << "I am a Manager " << endl;
	}
};


int main()
{
	Manager m;

	m.nfunc();
	
	
	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>


using namespace std;

class Employee {
public:
	virtual void display()const {
		cout << "I am an employee " << endl;
	}
	void nfunc()
	{
		cout << "Employee::nfunc" << endl;
		display();
	}
};

class Manager : public Employee {
public:
	void display()const {
		cout << "I am a Manager " << endl;
	}
};


int main()
{
	Manager m;
	Employee &e = m;

	e.display();
	
	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>


using namespace std;

class Employee {
public:
	virtual void display()const {
		cout << "I am an employee " << endl;
	}
};

class Manager : public Employee {
public:
	void display()const {
		cout << "I am a Manager " << endl;
	}
};

class SalesManager : public Manager {
public:
	void display()const {
		cout << "I am a Sales Manager " << endl;
	}
};

int main()
{
	SalesManager sm;
	Manager *p = &sm;

	p->display();


	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>


using namespace std;

class Employee {
public:
	virtual void display()const {
		cout << "I am an employee " << endl;
	}
};

class Manager : public Employee {
public:
	void display()const {
		cout << "I am a Manager " << endl;
	}
};

class SalesManager : public Manager {
public:
	void display()const {
		cout << "I am a Sales Manager " << endl;
	}
};

int main()
{
	SalesManager sm;
	Manager *p = &sm;

	p->display();


	return 0;
}
///////////////////////////////////////////////
///////////////////////////////////////////////
///////////////////////////////////////////////
#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>


using namespace std;

class Employee {
public:
	virtual void display()const {
		cout << "I am an employee " << endl;
	}
};

class Manager : public Employee {
public:
	void display()const {
		cout << "I am a Manager " << endl;
	}
};

class SalesManager : public Manager {
public:
	void display()const {
		cout << "I am a Sales Manager " << endl;
	}
};

int main()
{
	SalesManager sm;
	Employee *p = &sm;

	p->display();


	return 0;
}